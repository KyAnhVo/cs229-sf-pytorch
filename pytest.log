Test predictionGaussianKernel
xTest = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
xInputTest = tensor([0., 2., 4., 6., 8.], device='cuda:0')
gaussian kernel: tensor([[1.5335e-01],
        [1.3007e-05],
        [2.9578e-23]], device='cuda:0')

----------------------------------------------------------------------------------------------------

Test trainingGaussianKernel
xTest = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
gaussian kernel: tensor([[1.0000e+00, 1.6374e-07, 7.1878e-28],
        [1.6374e-07, 1.0000e+00, 1.6374e-07],
        [7.1878e-28, 1.6374e-07, 1.0000e+00]], device='cuda:0')

----------------------------------------------------------------------------------------------------

Test gaussianKernel

1. test on 1d array
x1 = tensor([1., 2., 3., 4., 5.], device='cuda:0')
x2 = tensor([1., 3., 5., 7., 9.], device='cuda:0')
gaussian kernel: 0.023517746478319168

2. test on 2d array
x1 = tensor([1., 2., 3., 4., 5.], device='cuda:0')
x2 = tensor([1., 3., 5., 7., 9.], device='cuda:0')
gaussian kernel: 0.023517746478319168

----------------------------------------------------------------------------------------------------

Test prediction
input = tensor([0., 2., 4., 6., 8.], device='cuda:0')
x = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
y = tensor([-1., -1.,  1.], device='cuda:0')
alpha = tensor([2., 4., 1.], device='cuda:0')
prediction is: 4.193238258361816

----------------------------------------------------------------------------------------------------

Test trainPrediction
input = tensor([[0.],
        [2.],
        [4.],
        [6.],
        [8.]], device='cuda:0')
x = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
y = tensor([-1., -1.,  1.], device='cuda:0')
alpha = tensor([2., 4., 1.], device='cuda:0')
b = 4.5
OUTPUT: U = tensor([2.5000, 0.5000, 5.5000], device='cuda:0')

----------------------------------------------------------------------------------------------------

Test errorVector
U = tensor([2.5000, 0.5000, 5.5000], device='cuda:0')
Y = tensor([-1., -1.,  1.], device='cuda:0')
OUTPUT: E = tensor([3.5000, 1.5000, 4.5000], device='cuda:0')

----------------------------------------------------------------------------------------------------

Test updateLagrangians
Params: C = 4, i1 = 2, i2 = 0
x = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
y = tensor([-1., -1.,  1.], device='cuda:0')
alpha = tensor([2., 4., 1.], device='cuda:0')
E = tensor([3.5000, 1.5000, 4.5000], device='cuda:0')

new Lagrangian vector:
alpha = tensor([1.5000, 4.0000, 0.5000], device='cuda:0')
Old alphas: 1.0 2.0

----------------------------------------------------------------------------------------------------

Test getB
Params: C = 4, i1 = 2, i2 = 0, b = 4.5
x = tensor([[ 1.,  2.,  3.,  4.,  5.],
        [ 6.,  7.,  8.,  9., 10.],
        [11., 12., 13., 14., 15.]], device='cuda:0')
y = tensor([-1., -1.,  1.], device='cuda:0')
alpha = tensor([1.5000, 4.0000, 0.5000], device='cuda:0')
E = tensor([3.5000, 1.5000, 4.5000], device='cuda:0')
alpha1Prev = 1.0, alpha2Prev = 2.0
NEW B: b = 8.499999403953552

----------------------------------------------------------------------------------------------------

